{"version":3,"file":"static/js/961.f48b8b26.chunk.js","mappings":"+SAKAA,EAAAA,EAAAA,SAAAA,QAFiB,gCAGjBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QALU,mCAMVC,SAAU,SAOL,IAAMC,EAAiB,mCAAG,sGAE7BC,QAAQC,IAAIL,EAAAA,EAAAA,UAFiB,SAGNA,EAAAA,EAAAA,IAAU,sBAHJ,uBAGrBM,EAHqB,EAGrBA,KACRF,QAAQC,IAAIC,GAJiB,kBAKtBA,EAAKC,SALiB,yCAO7BH,QAAQC,IAAI,QAAS,CAAEG,MAAK,OAPC,kBAQtB,IARsB,0DAAH,qDAcjBC,EAAe,mCAAG,WAAMC,GAAN,yFAE3BN,QAAQC,IAAIL,EAAAA,EAAAA,UAFe,SAGJA,EAAAA,EAAAA,IAAA,gBAAmBU,IAHf,uBAGnBJ,EAHmB,EAGnBA,KACRF,QAAQC,IAAIC,GAJe,kBAKpBA,GALoB,yCAO3BF,QAAQC,IAAI,QAAS,CAAEG,MAAK,OAPD,kBAQpB,IARoB,0DAAH,sDAcfG,EAAY,mCAAG,gGAASC,EAAT,EAASA,MAAT,SAExBR,QAAQC,IAAIL,EAAAA,EAAAA,UAFY,SAIDA,EAAAA,EAAAA,IAAA,6BAAgCY,IAJ/B,uBAIhBN,EAJgB,EAIhBA,KACRF,QAAQC,IAAIC,GALY,kBAQjBA,GARiB,yCAUxBF,QAAQC,IAAI,QAAS,CAAEG,MAAK,OAVJ,kBAWjB,IAXiB,0DAAH,sDAiBZK,EAAe,mCAAG,WAAMH,GAAN,kGAEJV,EAAAA,EAAAA,IAAA,gBAAmBU,EAAnB,aAFI,uBAEnBJ,EAFmB,EAEnBA,KACRF,QAAQC,IAAIC,GAHe,kBAIpBA,EAAKQ,MAJe,uCAM3BV,QAAQC,IAAI,QAAS,CAAEG,MAAK,OAND,kBAOpB,IAPoB,yDAAH,sDAafO,EAAe,mCAAG,WAAML,GAAN,yFAE3BN,QAAQC,IAAIL,EAAAA,EAAAA,UAFe,SAGJA,EAAAA,EAAAA,IAAA,gBAAmBU,EAAnB,aAHI,uBAGnBJ,EAHmB,EAGnBA,KACRF,QAAQC,IAAIC,GAJe,kBAKpBA,EAAKC,SALe,yCAO3BH,QAAQC,IAAI,QAAS,CAAEG,MAAK,OAPD,kBAQpB,IARoB,0DAAH,qD,uJCnEb,SAASQ,IAAgB,IAAD,IAC7BN,GAAYO,EAAAA,EAAAA,MAAZP,QACR,GAA0BQ,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAGMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAkB7C,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEKjB,EAAAA,EAAAA,IAAgBC,GAFrB,OAEbiB,EAFa,OAGnBP,EAASO,GAHU,gDAKnBvB,QAAQC,IAAI,QAAZ,MACAe,EAAS,MANU,yDAAH,qDAUpBM,GACD,GAAE,CAAChB,IAICS,GAyCH,6BACE,SAAC,KAAD,CAAMS,GAAIP,EAAV,sBACA,4BACE,wBAAKF,EAAMU,SACX,gBACEC,MAAM,QACNC,OAAO,QACPC,IAAG,8CAAyCb,EAAMc,aAClDC,IAAKf,EAAMU,SAEb,yCAAiBM,KAAKC,MAA2B,GAArBjB,EAAMkB,cAAlC,QACA,sCACA,uBAAIlB,EAAMmB,YACV,oCACA,2BACG,IACAnB,EAAMoB,OAAOC,KAAI,SAAAC,GAChB,OAAO,uBAAkBA,EAAKC,MAAfD,EAAKE,GACrB,WAGL,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMf,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,KAAD,QArEA,wCAwEL,C","sources":["components/Api.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'f18e42173aa93d2e63f9c91aa9147cf6';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: KEY,\n  language: 'en-US',\n};\n\n// У цій роботі будуть використовуватися наступні ендпоінти.\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// https://api.themoviedb.org/3/trending/all/{time_window}\nexport const getMoviesTrending = async () => {\n  try {\n    console.log(axios.defaults);\n    const { data } = await axios.get('trending/movie/day');\n    console.log(data);\n    return data.results;\n  } catch (error) {\n    console.log('error', { error });\n    return [];\n  }\n};\n\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n//api.themoviedb.org/3/movie/{movie_id}\nexport const getMovieDetails = async movieId => {\n  try {\n    console.log(axios.defaults);\n    const { data } = await axios.get(`movie/${movieId}`);\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log('error', { error });\n    return [];\n  }\n};\n\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// https://api.themoviedb.org/3/search/movie\nexport const searchMovies = async ({ query }) => {\n  try {\n    console.log(axios.defaults);\n\n    const { data } = await axios.get(`search/movie?query=${query}`);\n    console.log(data);\n\n    // return data.results;\n    return data;\n  } catch (error) {\n    console.log('error', { error });\n    return [];\n  }\n};\n\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// https://api.themoviedb.org/3/movie/{movie_id}/credits\nexport const getMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`);\n    console.log(data);\n    return data.cast;\n  } catch (error) {\n    console.log('error', { error });\n    return [];\n  }\n};\n\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews\nexport const getMovieReviews = async movieId => {\n  try {\n    console.log(axios.defaults);\n    const { data } = await axios.get(`movie/${movieId}/reviews`);\n    console.log(data);\n    return data.results;\n  } catch (error) {\n    console.log('error', { error });\n    return [];\n  }\n};\n\n// Приклад cURL\n\n// curl --request GET \\\n//      --url 'https://api.themoviedb.org/3/movie/11?api_key=f18e42173aa93d2e63f9c91aa9147cf6'\n\n// Більше того, ви можете надсилати кілька запитів, просто розділяючи значення комами:\n// приклад\n// https://api.themoviedb.org/3/movie/157336?api_key=f18e42173aa93d2e63f9c91aa9147cf6&append_to_response=videos,images\n\n// 'https://api.themoviedb.org/3/trending/all/day?language=en-US', options;\n","// import css from './MovieDetails.module.css';\nimport { useParams } from 'react-router-dom';\nimport { Link, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieDetails } from 'components/Api';\n\nexport default function MovieDetails() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const movieData = await getMovieDetails(movieId);\n        setMovie(movieData);\n      } catch (error) {\n        console.log('error', error);\n        setMovie(null);\n      }\n    };\n\n    fetchMovieData();\n  }, [movieId]);\n\n  \n\n  if (!movie) {\n    return (\n      <div>\n       Loading ...\n      </div>\n    );\n  }\n\n  // const { movieId } = useParams();\n\n  // const [isLoading, setIsLoading] = useState(true);\n  // const [isError, setIsError] = useState(false);\n  // const [movie, setMovie] = useState('');\n\n  // const location = useLocation();\n  // const backLinkHref = location.state?.from ?? '/movies';\n\n  // useEffect(\n  //   () => async () => {\n  //     try {\n  //       const MovieDetails = await getMovieDetails(movieId);\n  //       console.log(MovieDetails);\n  //       setMovie(MovieDetails);\n  //     } catch (error) {\n  //       setIsError(true);\n  //     } finally {\n  //       setIsLoading(false);\n  //     }\n  //   },\n  //   [movieId]\n  // );\n\n  // if (isLoading) {\n  //   return 'Loading data...';\n  // }\n\n  // if (isError) {\n  //   return 'Error while loading movie...';\n  // }\n\n  return (\n    <main>\n      <Link to={backLinkHref}>Go back</Link>\n      <div>\n        <h2>{movie.title}</h2>\n        <img\n          width=\"200px\"\n          height=\"300px\"\n          src={`https://image.tmdb.org/t/p/original/${movie.poster_path}`}\n          alt={movie.title}\n        />\n        <p>User Scrore: {Math.round(movie.vote_average * 10)}%</p>\n        <h3>Overview</h3>\n        <p>{movie.overview}</p>\n        <h3>Genres</h3>\n        <div>\n          {' '}\n          {movie.genres.map(genr => {\n            return <p key={genr.id}>{genr.name}</p>;\n          })}\n        </div>\n      </div>\n      <h3>Additional information</h3>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Outlet />\n    </main>\n  );\n}\n"],"names":["axios","api_key","language","getMoviesTrending","console","log","data","results","error","getMovieDetails","movieId","searchMovies","query","getMovieCredits","cast","getMovieReviews","MovieDetails","useParams","useState","movie","setMovie","backLinkHref","useLocation","state","from","useEffect","fetchMovieData","movieData","to","title","width","height","src","poster_path","alt","Math","round","vote_average","overview","genres","map","genr","name","id"],"sourceRoot":""}